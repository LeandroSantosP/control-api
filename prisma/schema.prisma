generator client {
   provider      = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator erd {
   provider = "prisma-erd-generator"
   output   = "../ERD.svg"
   theme    = "neutral"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

enum Recurrence {
   monthly
   daily
   yearly
}

enum Category {
   transport
   food
   habitation
   education
   health
   leisure
   products
   debts
   Taxes
   Investments
   unknown
}

model adress {
   id String @id @default(uuid())
}

// Not aplly yet

model Profile {
   id          String  @id @default(uuid())
   avatar      String
   profession  String?
   salary      Decimal @default(0)
   phonenumber String?
   dateOfBirth String?

   User User[]
}

model User {
   id         String    @id @default(uuid())
   email      String    @unique
   name       String
   password   String
   admin      Boolean   @default(false)
   created_at DateTime  @default(now())
   updated_at DateTime  @updatedAt
   deleted_at DateTime?

   profile   Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)
   profileId String?

   transactions Transaction[]
   MonthlyGoals MonthlyGoals[]

   @@map("users")
}

model MonthlyGoals {
   id    String @id @default(uuid())
   month String @unique

   expectated_revenue Decimal
   expectated_expense Decimal

   created_at DateTime @default(now())
   updated_at DateTime @updatedAt

   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String

   @@map("monthly_goals")
}

model Transaction {
   id             String      @id @default(uuid())
   description    String
   value          Decimal
   recurrence     Recurrence?
   installments   Int?
   isSubscription Boolean?
   due_date       DateTime?
   filingDate     DateTime?
   resolved       Boolean     @default(false)
   created_at     DateTime    @default(now())
   updated_at     DateTime    @updatedAt
   type           String?

   author User   @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String

   category               TransactionsCategory @relation(fields: [transactionsCategoryId], references: [id], onDelete: Cascade)
   transactionsCategoryId String

   @@map("transactions")
}

model TransactionsCategory {
   id   String   @id @default(uuid())
   name Category @unique @default(unknown)

   created_at  DateTime      @default(now())
   updated_at  DateTime      @updatedAt
   Transaction Transaction[]

   @@map("transactions_category")
}
